#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# Compass requirements
unless defined? LOADED_DEFAULT_CONFIG
  LOADED_DEFAULT_CONFIG = true
  require 'compass'
  Compass.add_project_configuration 'config.rb' 
end

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

sass_options = Compass.sass_engine_options

compile '/stylesheets/partials/*/' do
 # Don’t compile partials
end

route '/stylesheets/partials/*/' do
nil
end

compile '/stylesheets/*/' do
  case item[:extension]
  when 'sass'
    filter :sass, Compass.sass_engine_options
  when 'scss'
    filter :sass, sass_options.merge(:syntax => :scss)
    filter :relativize_paths, :type => :css
  when 'css'
    #nothing
  end
end

compile '/js/*' do
  # Change this to mod your coffee files and write a corresponding route
  # file
end

route '/stylesheets/*/' do
  item.identifier.chop + '.css'
end

route '/js/*' do
  item.identifier.chop + item[:extension]
end

compile '/teaching/*' do
  filter :kramdown
  layout 'default'
end

compile '/posts/feed/' do
  filter :erb
end

compile '/assets/*' do
  #don't filter
end

compile '/posts/archive/*' do
  filter :youtube
  filter :kramdown, :options => {:fenced_code_blocks => true}
  filter :colorize_syntax, :default_colorizer => :pygmentsrb
  layout 'archive_post'
end

compile '/posts/*' do
  filter :youtube
  case item[:extension]
    when 'md'
      filter :kramdown, :options => {:fenced_code_blocks => true}
    when 'org'
      filter :orgmode
    end
  filter :colorize_syntax, :default_colorizer => :pygmentsrb
  layout 'post'
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    case item[:extension]
      when 'haml'
        filter :haml
      when 'md'
        filter :kramdown
      when 'org'
        filter :orgmode
      else
        filter :erb
    end
    layout 'default'
  end
end

route '/comments/*/' do
  nil
end

route '/posts/feed/' do
  '/feed.xml'
end

route '/posts/*' do
  y,m,d,slug = /([0-9]+)\-([0-9]+)\-([0-9]+)\-([^\/]+)/.match(item.identifier).captures
  "/#{y}/#{m}/#{slug}/index.html"
end

route '/assets/webicons-master/*/' do
  if item[:extension] == 'css'
    "/stylesheets/" + File.basename(item.identifier.chop)
  else
    "/images/" + File.basename(item.identifier.chop)
  end
end 

route '/assets/*/' do
  item.identifier.chop
end 

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :haml, :filter => :html5
